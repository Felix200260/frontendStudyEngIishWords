using Microsoft.AspNetCore.Mvc;
using studyEnglishWordsBackend.Dto;
using studyEnglishWordsBackend.Service;

namespace studyEnglishWordsBackend.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CardsController : ControllerBase
    {
        private readonly ICardsService _cardsService;

        public CardsController(ICardsService cardsService)
        {
            _cardsService = cardsService;
        }

        [HttpGet("GetCardsByDeckId")]
        public async Task<IActionResult> GetCardsByDeckId([FromQuery] int deckId)
        {
            try
            {
                var cards = await _cardsService.GetCardsByDeckIdAsync(deckId);
                return Ok(cards);
            }
            catch (Exception ex)
            {
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ GetCardsByDeckId: {ex.Message}");
                Console.WriteLine($"üìç StackTrace: {ex.StackTrace}");
                
                return StatusCode(500, new { 
                    message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫", 
                    error = ex.Message 
                });
            }
        }

        [HttpPost]
        public async Task<IActionResult> AddCard([FromBody] AddCardRequestDto request)
        {
            try
            {
                var card = await _cardsService.AddCardAsync(request.EnglishWord, request.RussianWord, request.DeckId);
                return Ok(card);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ AddCard: {ex.Message}");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", error = ex.Message });
            }
        }

        [HttpPut("{cardId}")]
        public async Task<IActionResult> UpdateCard(int cardId, [FromBody] UpdateCardRequestDto request)
        {
            try
            {
                var card = await _cardsService.UpdateCardAsync(cardId, request.EnglishWord, request.RussianWord, request.DeckId);
                return Ok(card);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ UpdateCard: {ex.Message}");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", error = ex.Message });
            }
        }

        [HttpDelete("{cardId}")]
        public async Task<IActionResult> DeleteCard(int cardId)
        {
            try
            {
                await _cardsService.DeleteCardAsync(cardId);
                return Ok(new { message = "–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞" });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ DeleteCard: {ex.Message}");
                return StatusCode(500, new { message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", error = ex.Message });
            }
        }
    }
}
